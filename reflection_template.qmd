---
title: "STAT 331 Portfolio"
author: "Andrew Cho"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be a B-.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1

# Lab 2 Q1
#read_csv is loaded via tidyverse

library(tidyverse)  

surveys <- read_csv("data/surveys.csv")
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
# Lab 3 Q2

library(here)
teacher_evals <- read_csv(here("downloads/data/teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
# Lab 3 Q5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(teacher_id = as.character(teacher_id)) |>
  select(
    course_id, teacher_id, question_no, no_participants,
    resp_share, SET_score_avg, percent_failed_cur,
    academic_degree, seniority, sex
  )

glimpse(teacher_evals_clean)
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

#Lab 5
witness_interviews <- interview |>
  inner_join(witnesses, by = c("person_id" = "id")) |>
  select(name, transcript)
```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

  plot_data <- ca_childcare |>
  select(
    region, 
    study_year, 
    starts_with("mc_") #Added starts_with
  ) |>
  pivot_longer(
    cols      = starts_with("mc_"),
    names_to  = "age_group",
    values_to = "price_weekly"
  )

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
# Lab 3 Q5
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>   # numeric filter satisfies the numeric case
  mutate(teacher_id = as.character(teacher_id)) |>
  select(
    course_id, teacher_id, question_no, no_participants,
    resp_share, SET_score_avg, percent_failed_cur,
    academic_degree, seniority, sex
  )
```

-   Numeric Example 2

```{r}
#| label: wd-3-date

yr1_by_course <- teacher_evals_clean |>
  filter(seniority == 1)
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

#Lab 5
witness2 <- person |>
filter(address_street_name == "Franklin Ave",
str_detect(name, "^Ann"))
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

#Lab 5
members_48Z <- get_fit_now_member |>
mutate(id = as.character(id)) |>
filter(str_starts(id, "48Z"))
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
library(lubridate)

checkins_0109 <- get_fit_now_check_in |>
  mutate(
    membership_id = as.character(membership_id),
    # EDIT: Treat check_in_date as an actual Date (original data coded as int yyyymmdd).
    check_in_date = ymd(as.character(check_in_date))
  ) |>
  filter(check_in_date == ymd("2018-01-09"))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# Lab 3 Q11 — create a new numeric summary column
yr1_by_course <- teacher_evals_clean |>
  filter(seniority == 1) |>
  group_by(teacher_id, course_id) |>
  summarise(
    fail_course_mean = mean(percent_failed_cur, na.rm = TRUE),
    .groups = "drop"
  )
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

#Lab 5
checkins_0109 <- get_fit_now_check_in |>
mutate(
membership_id = as.character(membership_id),
check_in_date = as.integer(check_in_date)
) |>
filter(check_in_date == 20180109)
```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

#Lab 4 Q7
plot_data <- ca_childcare |>
select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
pivot_longer(
cols = c(mc_infant, mc_toddler, mc_preschool),
names_to = "age_group",
values_to = "price_weekly"
) |>
mutate(
age_group = recode(age_group,
mc_infant = "Infant",
mc_toddler = "Toddler",
mc_preschool = "Preschool"),
age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
region = fct_recode(region, "Los Angeles County" = "Los Angeles"),
region = fct_relevel(
region,
"San Francisco Bay Area",
"Orange",
"Los Angeles County",
"Northern San Joaquin Valley",
"Central Coast",
"Inland Empire",
"Superior California",
"Southern San Joaquin Valley",
"San Diego-Imperial",
"North Coast"
)
)
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2
# Lab 4 Q7
plot_data <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols      = c(mc_infant, mc_toddler, mc_preschool),
    names_to  = "age_group",
    values_to = "price_weekly"
  ) |>
  mutate(
    age_group = recode(
      age_group,
      mc_infant    = "Infant",
      mc_toddler   = "Toddler",
      mc_preschool = "Preschool"
    ),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region    = fct_recode(region, "Los Angeles County" = "Los Angeles"),
    region    = fct_relevel(
      region,
      "San Francisco Bay Area",
      "Orange",
      "Los Angeles County",
      "Northern San Joaquin Valley",
      "Central Coast",
      "Inland Empire",
      "Superior California",
      "Southern San Joaquin Valley",
      "San Diego-Imperial",
      "North Coast"
    )
  )
```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

witness2 <- person |>
  filter(
    address_street_name == "Franklin Ave",
    str_detect(name, "^Ann")
  ) |>
  mutate(
    name_clean = str_to_title(name)
  )
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

checkins_0109 <- get_fit_now_check_in |>
  mutate(
    membership_id = as.character(membership_id),
    check_in_date = ymd(as.character(check_in_date)),
    check_in_month = month(check_in_date, label = TRUE)
  ) |>
  filter(check_in_date == ymd("2018-01-09"))
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

#Lab 4 Q3
ca_childcare <- ca_childcare |>
left_join(
tax_rev |>
rename(county_name = entity_name,
study_year = year),
by = c("county_name", "study_year")
)
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right-ex-1

# Lab 4 data — demonstrate a right_join using the same sources
tax_enriched <- tax_rev |>
  rename(county_name = entity_name, study_year = year) |>
  right_join(ca_childcare, by = c("county_name", "study_year"))
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
# Lab 4 Q2
ca_childcare <- counties |>
  filter(state_abbreviation == "CA") |>
  inner_join(
    childcare_costs |>
      filter(study_year >= 2008, study_year <= 2018),
    by = "county_fips_code"
  )
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-left-ex-1
# Lab 4 Q3
ca_childcare <- ca_childcare |>
  left_join(
    tax_rev |>
      rename(
        county_name = entity_name,
        study_year  = year
      ),
    by = c("county_name", "study_year")
  )
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
#LAB 5

gym_members_checked_in <- get_fit_now_member |>
  semi_join(
    get_fit_now_check_in |> 
      filter(check_in_date == 20180109),
    by = c("id" = "membership_id")
  )
```

-   `anti_join()`

```{r}
#| label: wd-6-anti
#LAB 5

gym_members_not_checked_in <- get_fit_now_member |>
  anti_join(
    get_fit_now_check_in |> 
      filter(check_in_date == 20180109),
    by = c("id" = "membership_id")
  )
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

# Lab 4 Q7
plot_data <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols      = c(mc_infant, mc_toddler, mc_preschool),
    names_to  = "age_group",
    values_to = "price_weekly"
  )
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

# Lab 4 Q5
mhi_by_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(
    median_mhi_2018 = median(mhi_2018, na.rm = TRUE),
    .groups         = "drop"
  ) |>
  pivot_wider(
    names_from  = study_year,
    values_from = median_mhi_2018,
    names_sort  = TRUE
  ) |>
  arrange(desc(`2018`))

mhi_by_region

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
# Lab 1 Q6 — two boxplots with clear labels and tidy code
library(tidyverse)

ggplot(data = ToothGrowth, mapping = aes(x = supp, y = len)) +
  geom_boxplot() +
  labs(x = "Supplement", y = "Length of Teeth (mm)")

ToothGrowth |>
  mutate(dose = as.factor(dose)) |>
  ggplot(mapping = aes(x = dose, y = len)) +
  geom_boxplot() +
  labs(x = "Dose of Supplement (mg/day)", y = "Length of Teeth (mm)")

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
# Lab 3 Q5 — clean and focus variables for downstream analysis
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(teacher_id = as.character(teacher_id)) |>
  select(
    course_id, teacher_id, question_no, no_participants,
    resp_share, SET_score_avg, percent_failed_cur,
    academic_degree, seniority, sex
  )

glimpse(teacher_evals_clean
        )
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
# Lab 2 Q4–8
library(tidyverse)

ggplot(surveys, aes(x = weight, y = hindfoot_length)) +
  geom_point(alpha = 0.3) + 
  facet_wrap(~ species) + 
  labs(
    title    = "Relationship Between Weight and Hindfoot Length by Species",
    subtitle = "Hindfoot Length (mm)",
    x        = "Weight (grams)",
    y        = ""
  )

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

#Lab 2 Q10-15
ggplot(surveys, aes(x = species, y = weight)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(color = "steelblue", alpha = 0.4) +
labs(x = "species", y = "weight (grams)", title = "Rodent weights by species") +
theme(axis.text.x = element_text(angle = 45))
```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

#Lab 3 Q2
library(ggplot2)

ggplot(teacher_evals_compare, aes(x = sen_level, fill = set_level)) +
geom_bar(position = "fill") +
labs(
title = "Evaluation of Teachers' Use of Activities",
x = "Years of Experience",
y = "Percentage",
fill = "Evaluation Rating"
) +
scale_fill_manual(values = c("excellent" = "#9834eb", "standard" = "#d46c22")) +
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_text(face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold")
)
```

-   Dates (time series plot)

```{r}
#| label: dvs-1-date
# Lab 4 Q7
ggplot(plot_data, aes(x = study_year, y = price_weekly, color = region)) +
  geom_point(alpha = 0.5, size = 1.5) +
  geom_smooth(method = "loess", se = FALSE, linewidth = 1) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  labs(
    title  = "Weekly Median Price for Center-Based Childcare",
    x      = "Year",
    y      = "Median Weekly Price",
    color  = "California Region"
  ) +
  facet_wrap(~ age_group, nrow = 1
             )
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
# Lab 3 Challenge 2
ggplot(teacher_evals_compare, aes(x = sen_level, fill = set_level)) +
  geom_bar(position = "fill") +
  labs(
    title = "Evaluation of Teachers' Use of Activities",
    x     = "Years of Experience",
    y     = "Percentage",
    fill  = "Evaluation Rating"
  ) +
  scale_fill_manual(values = c("excellent" = "#9834eb", "standard" = "#d46c22")) +
  theme_minimal() +
  theme(
    legend.position = "top",
    legend.title    = element_text(face = "bold"),
    plot.title      = element_text(hjust = 0.5, face = "bold")
  )
```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2
# Lab 2 Q10–15
ggplot(surveys, aes(x = species, y = weight)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(alpha = 0.4) +
  labs(
    x     = "Species",
    y     = "Weight (grams)",
    title = "Rodent Weights by Species"
  ) +
  theme(axis.text.x = element_text(angle = 45))
```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

#Lab 1 Q6
ggplot(data = ToothGrowth,
mapping = aes(x = supp, y = len)) +
geom_boxplot() +
labs(x = "Supplement", y = "Length of Teeth (mm)")

ToothGrowth %>%
mutate(dose = as.factor(dose)) %>%
ggplot(mapping = aes(x = dose, y = len)) +
geom_boxplot() +
labs(x = "Dose of Supplement (mg/day)", y = "Length of Teeth (mm)")
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4


```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

#Lab 3 Challenge 2
ggplot(teacher_evals_compare, aes(x = sen_level, fill = set_level)) +
geom_bar(position = "fill") +
labs(
title = "Evaluation of Teachers' Use of Activities",
x = "Years of Experience",
y = "Percentage",
fill = "Evaluation Rating"
) +
scale_fill_manual(values = c("excellent" = "#9834eb", "standard" = "#d46c22")) +
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_text(face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold")
)
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1
# Lab 3 Challenge 2
ggplot(teacher_evals_compare, aes(x = sen_level, fill = set_level)) +
  geom_bar(position = "fill") + 
  scale_fill_manual(values = c("excellent" = "#9834eb", "standard" = "#d46c22")) +
  labs(title = "Evaluation of Teachers' Use of Activities") +
  theme_minimal()

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3
# Lab 4 Q7
ggplot(plot_data, aes(x = study_year, y = price_weekly, color = region)) +
  geom_point(alpha = 0.5, size = 1.5) +
  geom_smooth(method = "loess", se = FALSE, linewidth = 1) +
  facet_wrap(~ age_group, nrow = 1)
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# Lab 4 Q5
mhi_by_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(
    median_mhi_2018 = median(mhi_2018, na.rm = TRUE),
    .groups         = "drop"
  ) |>
  pivot_wider(
    names_from  = study_year,
    values_from = median_mhi_2018,
    names_sort  = TRUE
  ) |>
  arrange(desc(`2018`))

mhi_by_region

```

-   Example using `across()`

```{r}
#| label: dvs-4-across
# Lab 3 Q10
q1_by_course <- teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id, course_id) |>
  summarise(q1_course_mean = mean(SET_score_avg, na.rm = TRUE), .groups = "drop")

q1_stats <- q1_by_course |>
  group_by(teacher_id) |>
  summarise(
    n_courses = n(),
    q1_mean   = mean(q1_course_mean, na.rm = TRUE),
    .groups   = "drop"
  ) |>
  filter(n_courses >= 3)

q1_stats
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
# Lab 3 Q10
q1_by_course <- teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id, course_id) |>
  summarise(q1_course_mean = mean(SET_score_avg, na.rm = TRUE), .groups = "drop")

q1_stats <- q1_by_course |>
  group_by(teacher_id) |>
  summarise(
    n_courses = n(),
    q1_mean   = mean(q1_course_mean, na.rm = TRUE),
    .groups   = "drop"
  ) |>
  filter(n_courses >= 3)

q1_stats
```

-   Example 2

```{r}
#| label: dvs-5-2
# Lab 4 Q6
region_infant_2018 <- ca_childcare |>
  filter(study_year == 2018) |>
  group_by(region) |>
  summarize(median_mc_infant = median(mc_infant, na.rm = TRUE), .groups = "drop") |>
  slice_min(median_mc_infant, n = 1, with_ties = FALSE)

region_income_min_2018 <- mhi_by_region |>
  slice_min(`2018`, n = 1, with_ties = FALSE) |>
  select(
    region_lowest_income_2018 = region,
    lowest_income_2018        = `2018`
  )

region_infant_2018
region_income_min_2018
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1
# Lab 4 Q5
mhi_by_region |>
  rename(
    mhi_2008 = `2008`,
    mhi_2018 = `2018`
  )
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2
# Lab 3 Q7

teacher_evals_clean |>
  distinct(teacher_id, academic_degree) |>
  count(academic_degree, name = "Number_of_Instructors") |>
  arrange(desc(Number_of_Instructors))
```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

mhi_by_region |>
  arrange(desc(`2018`))
```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
# Lab 4 Q2
ca_childcare <- counties |>
  filter(state_abbreviation == "CA") |>
  inner_join(
    childcare_costs |>
      filter(study_year >= 2008, study_year <= 2018),
    by = "county_fips_code"
  )
```

-   using `across()`

```{r}
#| label: pe-1-across
# Lab 4 Q7
plot_data <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols      = c(mc_infant, mc_toddler, mc_preschool),
    names_to  = "age_group",
    values_to = "price_weekly"
  ) |>
  mutate(
    age_group = recode(
      age_group,
      mc_infant    = "Infant",
      mc_toddler   = "Toddler",
      mc_preschool = "Preschool"
    )
  )
```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

#Lab 4 Q7
plot_data <- ca_childcare |>
select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
pivot_longer(
cols = c(mc_infant, mc_toddler, mc_preschool),
names_to = "age_group",
values_to = "price_weekly"
) |>
mutate(
age_group = recode(age_group,
mc_infant = "Infant",
mc_toddler = "Toddler",
mc_preschool = "Preschool"),
age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
region = fct_recode(region, "Los Angeles County" = "Los Angeles"),
region = fct_relevel(
region,
"San Francisco Bay Area",
"Orange",
"Los Angeles County",
"Northern San Joaquin Valley",
"Central Coast",
"Inland Empire",
"Superior California",
"Southern San Joaquin Valley",
"San Diego-Imperial",
"North Coast"
)
)

ggplot(plot_data, aes(x = study_year, y = price_weekly, color = region)) +
geom_point(alpha = 0.5, size = 1.5) +
geom_smooth(method = "loess", se = FALSE, linewidth = 1) +
scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
labs(
title = "Weekly Median Price for Center-Based Childcare",
x = "Year",
y = "Median Weekly Price",
color = "California Region"
) +
facet_wrap(~ age_group, nrow = 1)
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
# Lab 4 Q7
ggplot(plot_data, aes(x = study_year, y = price_weekly, color = region)) +
  geom_point(alpha = 0.5, size = 1.5) +
  geom_smooth(method = "loess", se = FALSE, linewidth = 1) +
  facet_wrap(~ age_group, nrow = 1)

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

#Lab 2 Q17-18
species_mod <- aov(weight ~ species, data = surveys)
summary(species_mod)
```

-   Example 2

```{r}
#| label: dsm-2-2

#Challenge 3
table <- table(teacher_evals_compare$set_level, teacher_evals_compare$sen_level)
chisq_result <- chisq.test(table)
chisq_result
```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Throughout the course, I found myself revising my thinking on certain topics, particularly Joins. As I understood more about Joins, I realized that they have a close relationship with filters (specifically anti joins) and there could be times when they can be used interchangeably. While creating this portfolio, I made a few edits to my existing code in order for it to more closely demonstrate the learning target.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

So far throughout the course, I have extended my thinking on certain topics by seeking help from my classmates and utilizing websites and forums online that provided me extra help when needed. In creating this portfolio, I used some of the information that I obtained through the internet and classmates to increase code efficiency, make my code tidier, and find proper solutions to questions which I struggled with.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

I was particularly proud of a comment I left on Lab 4 code review where I was able to find a function in my peer's code that could have been replaced with a summarise() to increase their code's efficiency and it showed me that I had a good understanding of that specific function.

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

The weekly programming activities were highly beneficial for my learning in this course because it allowed me to help my classmates and solidify my knowledge through teaching/helping them, and allowed me to get help on things that I did not understand completely. It was also highly beneficial that while helping each other, we could ask Dr T or class helpers to get even further assistance.
